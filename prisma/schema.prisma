// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id String @id @default(uuid()) @map("_id")
  userId String
  title String 
  description String?
  imageUrl String?
  videoUrl String?
  youtubeUrl String?
  price Int?
  isPublished Boolean @default(false)
  purchases Joined[]
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  levelId String?
  level Level? @relation(fields: [levelId], references: [id])
  attachments Attachment[]
  chapters Chapter[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([levelId])


}
model Category{
  id String @id @default(uuid()) @map("_id")
  name String @unique
  courses Course[]
}
model Level{
  id String @id @default(uuid()) @map("_id")
  name String @unique
  courses Course[]
}
model Attachment{
  id String @id @default(uuid()) @map("_id")
  name String
  url String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([courseId])
}
model VideoRating {
  id        String    @id @default(uuid()) @map("_id")
  videoId   String
  userId    String
  value     Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  video     VideoUrl  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  @@unique([videoId, userId])
}


model VideoUrl{
  id String @id @default(uuid()) @map("_id")
  videoUrl String @unique
  position Int
  chapterId String
  ratings VideoRating[]
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
model ChapterQuiz{
  id String @id @default(uuid()) @map("_id")
  quizUrl String
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Chapter{
  id String @id @default(uuid()) @map("_id")
  title String
  description String?
  youtubeUrl String?
  videoUrls VideoUrl[]
  quizUrls ChapterQuiz[]
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapterAttachments ChapterAttachment[]

  userProgress UserProgress[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model UserProgress {
  id String @id @default(uuid()) @map("_id")
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}
model Joined {
  id String @id @default(uuid()) @map("_id")

  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}


model ChapterAttachment {
  id String @id @default(uuid()) @map("_id")
  name String
  url String
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}
